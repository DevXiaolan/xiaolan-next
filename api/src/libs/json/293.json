{
  "id": "293",
  "title": "两种方式手写实现Promise（基本版）",
  "keywords": [
    "promise",
    "javascript",
    "JS"
  ],
  "content": "# Promise / deferred 分开的版本\n```javascript\n'use strict';\nlet myPromise = (deferred) =&gt; {\n  this._resolved = null;\n  this._rejected = null;\n  this.then = (resolve,reject) =&gt; {\n    switch (deferred.state){\n      case 'pending':\n        this._resolved = (typeof resolve === 'function') ? \n          resolve \n          : null;\n        this._rejected =  (typeof reject === 'function') ? \n          reject \n          : null;\n        break;\n      case 'rejected':\n        (typeof reject === 'function') \n        &amp;&amp; reject.call(null,deferred.reason);\n        break;\n      case 'resolved':\n        (typeof resolve === 'function') \n        &amp;&amp; resolve.call(null,deferred.result);\n        break;\n    }\n  };\n};\n\nlet myDeferred = () =&gt; {\n  let _self = this;\n  this.state = 'pending';\n  this.reason = null;\n  this.result = null;\n  this.promise = new myPromise(_self);\n\n  this.resolved = (val) =&gt; {\n    this.state = 'resolved';\n    this.result = val;\n    if(this.promise._resolved){\n      this.promise._resolved.call(null,val);\n    }\n  };\n\n  this.rejected = (err) =&gt; {\n    this.state = 'rejected';\n    this.reason = err;\n    if(this.promise._rejected){\n      this.promise._rejected.call(null,err);\n    }\n  };\n};\n```\n### USAGE\n```javascript\nconst fs = require('fs');\nlet getFileSync = function (path) {\n\n  let df = new myDeferred();\n\n  fs.readFile(path, (e, r) =&gt; {\n    if(e){\n \t  df.rejected(e);\n    }else{\n      df.resolved(r);\n    }\n  });\n  return df.promise;\n};\n\nlet r =getFileSync('./README.md');\n//pending\nr.then(\n  //resolved\n  (val) =&gt; console.log(val),\n\n  //rejected\n  (err) =&gt; console.log(err)\n);\n```\n# 一体化的版本\n```javascript\nlet myPromise = (fn) =&gt; {\n  let _self = this;\n  this.state = 'pending';\n  this.result = null;\n  this.reason = null;\n  this.resolvedHandler = null;\n  this.rejectedHandler = null;\n\n  this.resolved = (val) =&gt; {\n    _self.state = 'resolved';\n    _self.result = val;\n    if(typeof _self.resolvedHandler === 'function'){\n      _self.resolvedHandler(val);\n    }\n  };\n\n  this.rejected = (err) =&gt; {\n    _self.state = 'rejected';\n    _self.reason = err;\n\n    if(typeof _self.rejectedHandler === 'function'){\n      _self.rejectedHandler(err);\n    }\n  };\n\n  this._promise = {};\n\n  this._promise._p = _self;\n\n  this._promise.then = (resolvedHandler, rejectedHandler) =&gt; {\n    switch (_self.state){\n      case 'pending':\n    \t_self.resolvedHandler = (typeof resolvedHandler === 'function') ? \n        resolvedHandler \n        : null;\n    \t_self.rejectedHandler = (typeof rejectedHandler === 'function') ? \n        rejectedHandler \n        : null;\n    \tbreak;\n\n      case 'resolved':\n    \t(typeof resolvedHandler === 'function') \n        &amp;&amp; resolvedHandler(_self.result);\n    \tbreak;\n      case 'rejected':\n    \t(typeof rejectedHandler === 'function') \n        &amp;&amp; rejectedHandler(_self.reason);\n    }\n  };\n\n  fn(this.resolved,this.rejected);\n\n  return this._promise;\n};\n```\n### USAGE\n```javascript\nconst fs = require('fs');\n\nlet getFileSync = (path) =&gt; {\n  return new myPromise( (resolved, rejected) =&gt; {\n    fs.readFile(path, (e, r) =&gt; {\n      if(!e){\n        resolved(r);\n      }else{\n        rejected(e);\n      }\n    });\n  });\n};\n\nlet r = getFileSync('./README.md');\n//pending\n\nr.then(\n  //resolved\n  (val) =&gt; console.log(val), \n  //rejected\n  (err) =&gt; console.log(err)\n);\n```\n",
  "createdAt": 1467022560,
  "modified": 1467116983,
  "desc": "这里有两只 ES5 原生 Promise A+ 规范实现。"
}