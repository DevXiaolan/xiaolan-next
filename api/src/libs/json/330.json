{
  "id": 330,
  "title": "你知道在 Nginx.conf 里可以写JS吗",
  "keywords": [
    "js",
    "nginx"
  ],
  "createdAt": 1610464338,
  "updatedAt": 1610464338,
  "desc": "NJS 真是一个好东西，我们平时看到的 `Nginx.conf`，最多就做做反向代理、负载均衡。现在告诉你，通过 `javascript` 还能给`Nginx`赋能一些逻辑，一众 `JSer`自然是很兴奋。",
  "content": "![](https://nginx.org/nginx.png)\n\n> 老夫万万没想到，几年前无意间学了 NJS ，最近竟然用上了。\n> \n\n是的你没看错，如果你会写`javascript`，你甚至已经是一名`Nginx`配置管理员。\n\n今天我们就通过一个例子，带大家初步浅入门 `NJS`\n\n> [什么是 NJS](https://nginx.org/en/docs/njs/)\n\n前置知识：\n\n1. 一点点 nginx.conf 的认识\n2. javascript基本语法\n3. 其他作为程序员的基本素质\n\n\n###场景介绍（纯杜撰）\n\n案件的经过是这样的，最近有一个新的后端项目，希望接入到我们已有的微服务集群里。\n\n<img src=\"https://lanhaooss.oss-cn-shenzhen.aliyuncs.com/images/330/330-1.png\" style=\"width:300px;height:auto;margin: 0 auto; display:block\" />\n\n然后我好像明白了一些事情\n\n> Python 开发效率第一条： 不做复杂的事情\n\n####不过既然阿刚硬刚，恰好我有解决的方案，就不妨接受挑战吧。\n\n首先梳理一下原始需求 \n\n1. 真实的业务接口部署在我们的集群里\n2. 真实的业务接口需要做用户鉴权，如：判断用户是否登录\n3. 真实的业务接口不希望请求外部接口，希望网关放进来的都是已经登录的\n\n如果做到了以上三点，他们确实可以很轻松，这理由很“充分”。\n\n所以我指定了这个方案\n\n![](https://lanhaooss.oss-cn-shenzhen.aliyuncs.com/images/330/2.png)\n\n### 好了交代完背景我们进入很干的正题\n\nNJS 真是一个好东西，我们平时看到的 `Nginx.conf`，最多就做做反向代理、负载均衡。\n\n现在告诉你，通过 `javascript` 还能给`Nginx`赋能一些逻辑，一众 `JSer`自然是很兴奋。\n\n> 🤡 Nginx 高手竟在我身边\n\n那么我们看看怎么做：\n\n    // auth.js\n\tfunction auth(r) {\n\t\tr.subrequest('/auth') // 假设我们原本需要调用这个接口来检查登录\n\t\t  .then((reply) => {\n\t\t      if (reply.status !== 200) {\n\t\t        throw '未登录';\n\t\t      }\n\t\t  }).then(() => {\n\t\t    \tr.subrequest(r.uri, {})\n\t\t    \t// 隐去了一些不必要的细节\n\t\t  }).catch(e => {\n\t\t  \tr.return(401, e);\n\t\t  });\n\t}\n\t\n\texport default { auth };\n\n直接贴代码我觉得我也很刚。\n\n上面这段简单的 `JS` 代码，相信大家也能看明白的大概。\n\n意思就是，当请求进来时，首先去内部请求一下 `/auth` 接口；\n\n如果返回的不是200，就告诉前端 `401 未登录`；\n\n否则，再发起内部请求到真实业务接口 `r.uri`，得到真正的业务接口返回数据。\n\n###编写完JS逻辑，这事还没完，需要在 Nginx.conf 里增加点东西\n\n\t// nginx.conf (只贴关键内容)\n\t# 配置文件开头：载入 NJS 模块\n\tload_module modules/ngx_http_js_module.so;  \n\t...\n\t...\n\thttp {\n\t  # 通过 js_import 引入上面的JS代码\n      js_import main from auth.js;\n      ...\n      ...\n      server {\n        ...\n        ...\n      location ~ ^/ {\n        # 所有请求都通过上面的JS代码来处理了\n        js_content main.auth; \n      }\n\n**🔥🔥🔥因为上面的分解动作，都是在 Nginx 内部转发完成的，所以在前端的感受上就只是发生了一次简单的请求。**\n\n而对于躲在背后的业务接口来说，\n\n**开发接口的时候不需要关心用户鉴权，直接裸奔上阵。**\n\n###🤡当然是皆大欢喜的事情，很简单是不是"
}