{
  "id": "277",
  "title": "Javascript  对象之   Object.defineProperty",
  "keywords": [
    "javascript",
    "object"
  ],
  "content": "\n平时我们定义一个对象，给它添加属性，通常会这样做\n\n```javascript\nvar o = {};\n o.foo = function(){\n    console.log('foo');\n}\no.foo(); // print  'foo'\n```\n\n这是可行的，但是如果我们这样\n\n```javascript\no.foo = null;\n```\n\nfoo就被改变了，然后引起  TypeError: o.foo is not a function  的错误。\n## 于是，Object.defineProperty 就进入我们视野\n```javascript\nvar a = {};\nObject.defineProperty(a,'foo',{\n    value:function(){\n        console.log('foo..');\n    }\n});\n```\n\n这样，foo就不会被改变，强行赋值（o.foo = null;）在严格模式下会出 TypeError: \"foo\" is read-only 错误\n## 解读：\n```javascript\nObject.defineProperty 接受三个参数，\n第一个为对象，要添加属性的对象；\n第二个为属性的名字，字符串；\n第三个是一个对象，是对新添加的属性的一些设置，\n```\n\n重点讲第三个参数，它有以下设置项：\n\n```javascript\nvalue：属性的值，可以是基本属性、对象、函数等等\n\nwritable：是否可以写，默认false，所以上面的foo是readonly\n\nconfigurable：是否可以修改设置，默认false，即定义过以后是否能再次修改设置项\n\nenumerable：是否能被枚举，关系到for in 或者 Object.keys的时候会不会被列出来\n\nget、set：设置了get、set就不能设置 writable 或 value，不然会报错，这是对属性读写时的钩子，下面有栗子\n\nvar b = 1;\nvar a = {};\n    Object.defineProperty(a,'foo',{\n      set:function(v){\n        b = v;\n        console.log('set');// you can do any thing here\n      },\n      get:function(){\n        console.log('get');  // you can do any thing here\n        return b;\n      }\n    });\na.foo;  // print 'get' ,return 1\na.foo = 2; // print 'set' ,return 2\na.foo; //  print 'get'  ,return 2\n```\n## 是不是很棒？",
  "createdAt": 1453862040,
  "modified": 1453862732,
  "desc": "Object.defineProperty 接受三个参数，第一个为对象，要添加属性的对象；第二个为属性的名字，字符串；第三个是一个对象，是对新添加的属性的一些设置，"
}