{
  "id": "145",
  "title": "用setTimeout来做循环，实现串行效果",
  "keywords": [
    "js",
    "javascript",
    "timer"
  ],
  "content": "## 背景\njavascript 里，我们一般用setInterval方法来实现一个定时循环业务，函数原型如下：\n\n```javascript\nsetInterval(function(){\n    //这里放你要执行的业务，后面的参数是时间，单位毫秒，1秒=1000毫秒，比如\n    console.log('哈');\n},5000);\n```\n\n上面的代码，单独执行的时候，效果诚然是如我们所想的：\n\n```javascript\n哈    哈    哈    哈    （循环 ）\n```\n# 但是，问题来了。\n`javascript 是单进程的，即时是在浏览器还是在服务端node，这时候问题来了。`而 `异步操作次序的不确定性`，一个程序里不可能仅仅这几行代码，有可能出现一个情况，\n就是前一个callback（其他行为，比如写入一个大文件）执行的时间很长，回调队列处于阻塞状态，\n而你的`哈`正在以每5秒一个的频率进入队列。然后你可能看到的是这样的：\n\n```javascript\n哈    哈  （某长时间操作） 哈哈哈哈哈哈    哈    哈    哈   ......\n```\n\n中间某一段，因为回调堆积，引起的瞬间打印多个`哈`,这并不是我们想看到的。\n\n`===================================================================`\n# 怎么办呢？\n我们可以用 `setTimeout`来实现，它的参数列表和上面的一样，区别是这个逻辑只执行一次。\n惯例先上代码：\n\n```javascript\n//先把逻辑定义成一个函数\nvar do_sth = function(){\n    console.log('哈');\n    //然后用神奇的setTimeout,还是5秒\n    setTimeout(function(){\n        //注意了，调用自己\n        do_sth();\n    },5000);\n};\n```\n\n以上代码就是，输出了第一个`哈`以后，再申请下一个延时操作。\n这样，就能够让每个`哈`一个跟一个的输出，而不会出现回调堆积的情况。\n## 新技能GET！！\n后话：\n用这样的方法，可能会出现两次间隔超出5秒的情况，其实上面两种都会有这种情况。\n用setTimeout的意义在于解决堆积，避免一次性同时触发（尤其是一些IO操作）。\n",
  "createdAt": 1413635460,
  "modified": 1415951975,
  "desc": "javascript 里，我们一般用setInterval方法来实现一个定时循环业务，不过，这样做可能会踩到一些坑。"
}